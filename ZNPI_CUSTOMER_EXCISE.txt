*************************************************************************
**Report Name: ZNPI_CUSTOMER_EXCISE                                     *
**Consultant : Gnanasambanthan.V                                        *
**Author     : Gnanasambanthan.V                                        *
**Date       : 31.12.2008                                               *
**Description: Program creates an Batch Input Session for upload of     *
*              Customer excise details via transaction J1ID.            *
**----------------------------------------------------------------------*
report ZNPI_CUSTOMER_EXCISE
       no standard page heading line-size 255.
*----------------------------------------------------------------------*
* TABLES
*----------------------------------------------------------------------*
TABLES: J_1IMOCUST.              "Customer Master Excise Additional Data
*----------------------------------------------------------------------*
* Type-pools
*----------------------------------------------------------------------*
TYPE-POOLS : truxs.
*include bdcrecx1.
* include programs for common processes in interface programs
DATA:  zzret_code LIKE sy-subrc.
INCLUDE zbdcincl.
*----------------------------------------------------------------------*
* Selection Screen
*----------------------------------------------------------------------*
SELECTION-SCREEN : BEGIN OF BLOCK 001 WITH FRAME TITLE text-001.
PARAMETERS: p_upl       LIKE rlgrap-filename DEFAULT 'c:\temp\parbcust.xls',
            p_hed       AS CHECKBOX          DEFAULT 'X',     " With header line? X or Y for yes
            p_test      AS CHECKBOX,                          " test run? X or Y for yes
            p_sess(12)  TYPE c,
            p_mode.
PARAMETERS: p_rest      LIKE rlgrap-filename DEFAULT 'c:\temp\Result.xls'.

SELECTION-SCREEN : END OF BLOCK 001.

*----------------------------------------------------------------------*
* Data Declaration
*----------------------------------------------------------------------*
* input file format for Customer Excise Maintainance
DATA: BEGIN OF t_indata OCCURS 0,
*       s_no(5) TYPE n,                           "line number
       altkn      LIKE KNB1-altkn,               "Previous Master Record Number
       KUNNR      LIKE KNB1-KUNNR,               "Customer Number
       j_1iexcd   LIKE J_1IMOCUST-j_1iexcd,      "ECC Number
       J_1IEXRN   LIKE J_1IMOCUST-J_1IEXRN,      "Excise Registration Number
       j_1iexrg   LIKE J_1IMOCUST-j_1iexrg,      "Excise Range
       j_1iexdi   LIKE J_1IMOCUST-j_1iexdi,      "Excise Division
       j_1iexco   LIKE J_1IMOCUST-j_1iexco,      "Excise Commisionerate
       j_1icstno  LIKE J_1IMOCUST-j_1icstno,     "Central Sales Tax Number
       j_1ilstno  LIKE J_1IMOCUST-j_1ilstno,     "Local Sales Tax Number
       j_1ipanno  LIKE J_1IMOCUST-j_1ipanno,     "Permanent Account Number
       J_1IEXCICU LIKE J_1IMOCUST-J_1IEXCICU,    "Excise tax indicator for customer
       J_1ISERN   LIKE J_1IMOCUST-J_1ISERN,     "Service Tax Registration Number
       aedat      LIKE J_1IMOCUST-aedat,         "Changed On
       usnam      LIKE J_1IMOCUST-usnam,         "Changed by the user
      END OF t_indata.

*Output file format for Customer Excise Maintainance
DATA: BEGIN OF t_outdata OCCURS 0.
        INCLUDE STRUCTURE t_indata.
DATA: desc type string,                          "Description for error fields
      sort,
      end of t_outdata.

*Output file format for Customer Excise Maintainance with header line
DATA: BEGIN OF t_rest OCCURS 0,
*       s_no(7),                                  "line number
       altkn(10),                                "Previous Master Record Number
       kunnr(10),                                "Customer Number
       j_1iexcd(40),                             "ECC Number
       J_1IEXRN(40),                             "Excise Registration Number
       j_1iexrg(60),                             "Excise Range
       j_1iexdi(60),                             "Excise Division
       j_1iexco(60),                             "Excise Commisionerate
       j_1icstno(40),                            "Central Sales Tax Number
       j_1ilstno(40),                            "Local Sales Tax Number
       j_1ipanno(40),                            "Permanent Account Number
       J_1IEXCICU(25),                           "Excise tax indicator for customer
       J_1ISERN(19),     "Service Tax Registration Number
       aedat(10),                                "Changed On
       usnam(12),                                "Changed by the user
       desc type string,                         "Description
      END OF t_rest.
* Convert XLS into SAP format Function Module
DATA: it_raw  TYPE truxs_t_text_data.

DATA:  w_upllen            TYPE i VALUE 2000,
       err_msg(100)        TYPE c,
       sap_cusno           LIKE kna1-kunnr,
       batch_name(30)      TYPE c,
       v_open.

* Constants
CONSTANTS: c_trans(4)    VALUE 'J1ID',           " transaction code used
           delimiter(1)  VALUE ','.
DATA:  messtab LIKE bdcmsgcoll OCCURS 0 WITH HEADER LINE.

*To store number of data read by the process
DATA: BEGIN OF tot,
        ok                 TYPE i,
        read               TYPE i,
        err                TYPE i,
      END OF tot.
DATA : g_init TYPE i,
       g_mess TYPE string,
       v_flag TYPE c,
       V_FLAG1.

DATA: l_kunnr(30),
      l_excd(30),
      l_exrg(30),
      l_exdi(30),
      l_exco(30),
      l_cst(30),
      l_lst(30),
      l_pan(30),
      l_indi(30),
      l_date(30),
      l_name(30).
*----------------------------------------------------------------------*
* At Selection-Screen for upload and download file
*----------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_upl.
*To get file name for upload file at selection screen
  CALL FUNCTION 'F4_FILENAME'
    IMPORTING
      file_name = p_upl.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_rest.
*To get file name for upload file at selection screen
  CALL FUNCTION 'F4_FILENAME'
    IMPORTING
      file_name = p_rest.
*----------------------------------------------------------------------*
*  Start Of Selection
*----------------------------------------------------------------------*
START-OF-SELECTION.
*Validating upload File Path
  IF p_upl IS INITIAL.
    MESSAGE 'Please Fill the Upload File Path' TYPE 'S' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.
*Validating Download File Path
  IF p_rest IS INITIAL.
    MESSAGE 'Please Fill the Download File Path' TYPE 'S' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.
*Validating BDC Session
  IF p_sess IS INITIAL.
    MESSAGE 'Please Fill the BDC Session Name' TYPE 'S' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.
*Validating BDC Session Mode.
  IF p_mode IS INITIAL.
    MESSAGE 'Please Fill the BDC Session Mode' TYPE 'S' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.
*To upload input File
  PERFORM 100_upload_file.
  IF v_flag EQ 'X'.
    CLEAR : v_flag.
    WRITE: /01   text-001 ,
         27        ':',
         30      sy-repid,
*          92      text-001,
         92      sy-pagno,
        /01      text-003,
         10      'by',
         27      ':',
         30      sy-uname,
         82      sy-datum DD/MM/YY,
         92      sy-uzeit.

    ULINE.
    SKIP 1.
    ULINE.
    WRITE : 'Error in Uploading the File'.
    ULINE.
    EXIT.
  ELSE.
    CLEAR : v_flag.
  ENDIF.
  IF t_indata[] IS INITIAL.
    WRITE: / 'No records were uploaded.'.
    ULINE.
  ENDIF.
*Validation of Fields before uploading
  PERFORM field_validation.
  IF p_test IS INITIAL.
    IF NOT t_indata[] IS INITIAL.
      PERFORM create_customer_excise.
    endif.
  ELSE.
    PERFORM test_only_result.
  ENDIF.
*----------------------------------------------------------------------*
*  End Of Selection
*----------------------------------------------------------------------*
END-OF-SELECTION.
  IF NOT t_outdata[] IS INITIAL.
*To Download error file.
    PERFORM success_error_download.
  ENDIF.
  WRITE: /01        text-001 ,
            29        ':',
            30      sy-repid,
*           92      text-001,
            92      sy-pagno,
           /01      text-002,
            10      'by',
            29        ':',
            30      sy-uname,
            82      sy-datum DD/MM/YY,
            92      sy-uzeit.
  ULINE.
  SKIP 1.
  IF v_flag1 EQ 'X'.
    CLEAR v_flag1.
*    WRITE : /01 'Error in Downloading the File'.
    WRITE: /01     text-005,
            36     p_rest.
*    ULINE.
    EXIT.
  ELSE.
    IF  p_test is initial.
      WRITE: /01     text-005,
              36     p_rest.
*         /01     text-006,
*          20     batch_name.
    ELSE.
      WRITE: /01     text-005,
              36     p_rest.
    ENDIF.
  ENDIF.
*  WRITE: /01     text-003,
*          25     p_rest.
**         /01     text-006,
**          20     batch_name.
  ULINE.
  SKIP 2.
  WRITE: / 'TOTAL INPUT RECORDS READ',                36 tot-read.
  IF p_test IS INITIAL.
    tot-ok = tot-read - tot-err.
    WRITE: / 'TOTAL CUSTOMER EXCISE DATA CREATED',    36 tot-ok.
    WRITE: / 'TOTAL CUSTOMER EXCISE DATA IN ERROR',   36 tot-err.
  ELSE.
    tot-ok = tot-read - tot-err.
    WRITE: / 'TOTAL RECORDS SUCCESS',                 36 tot-ok.
    WRITE: / 'TOTAL RECORDS ERROR',                   36 tot-err.
  ENDIF.
*&---------------------------------------------------------------------*
*&      Form  100_UPLOAD_FILE
*&---------------------------------------------------------------------*
*       To upload input File
*----------------------------------------------------------------------*
FORM 100_UPLOAD_FILE .
  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
    EXPORTING
      i_line_header        = p_hed
      i_tab_raw_data       = it_raw
      i_filename           = p_upl
    TABLES
      i_tab_converted_data = t_indata.
  IF SY-SUBRC NE 0.
    V_FLAG = 'X'.
  ENDIF.
ENDFORM.                    " 100_UPLOAD_FILE
*&---------------------------------------------------------------------*
*&      Form  FIELD_VALIDATION
*&---------------------------------------------------------------------*
*       Validate Fields before uploading
*----------------------------------------------------------------------*
FORM FIELD_VALIDATION .
  DATA  v_old_kunnr(10) TYPE n.
  LOOP AT t_indata.
    ADD 1 TO tot-read.

    IF t_indata-altkn CO '0123456789 '.
      v_old_kunnr = t_indata-altkn.
      t_indata-altkn = v_old_kunnr.
      modify t_indata.
    ENDIF.

    SELECT SINGLE kunnr FROM knb1
                        INTO t_indata-kunnr
                       WHERE altkn = t_indata-altkn.
    IF sy-subrc = 0.
      SELECT SINGLE kunnr FROM J_1IMOcust
                          INTO J_1IMOCUST-kunnr
                         WHERE kunnr = t_indata-kunnr.
      IF sy-subrc ne 0.
        MODIFY  t_indata TRANSPORTING kunnr.
      ELSE.
        ADD 1 TO tot-err.
        MOVE-CORRESPONDING t_indata TO t_outdata.
        t_outdata-aedat = sy-datum.
        t_outdata-usnam = sy-uname.
        t_outdata-desc = 'An entry already exists with the same key'.
        t_outdata-sort = 'B'.
        APPEND t_outdata.
        DELETE t_indata.
        CONTINUE.
      ENDIF.
    ELSE.
      ADD 1 TO tot-err.
      MOVE-CORRESPONDING t_indata TO t_outdata.
      t_outdata-aedat = sy-datum.
      t_outdata-usnam = sy-uname.
      t_outdata-desc = 'Customer does not exist'.
      t_outdata-sort = 'B'.
      APPEND t_outdata.
      DELETE t_indata.
      CONTINUE.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " FIELD_VALIDATION
*&---------------------------------------------------------------------*
*&      Form  CREATE_CUSTOMER_EXCISE
*&---------------------------------------------------------------------*
*      Create the customer excise details based on the data provided   *
*      in the input Flat-file.                                         *
*----------------------------------------------------------------------*
FORM CREATE_CUSTOMER_EXCISE .
  CLEAR: err_msg,
          batch_name,
          t_outdata.
  loop at t_indata.
    PERFORM do_j1id_by_calltran
                       TABLES t_indata
                       USING  p_mode        "Show errors only
                              err_msg
                              batch_name
                              sap_cusno.

*perform bdc_transaction using 'J1ID'.
    CALL TRANSACTION 'J1ID' USING bdcdata MODE p_mode MESSAGES INTO messtab.
    IF sy-subrc NE 0.
      zzret_code = sy-subrc.
      IF v_open NE 'X'.
        PERFORM bdc_open_group USING p_sess.
        v_open = 'X'.
      ENDIF.
      PERFORM bdc_insert USING 'J1ID'.
    ELSE.
      zzret_code = 0.
    ENDIF.
    IF zzret_code = 0.
      sap_cusno = sy-msgv1.
    ELSE.
      CLEAR sap_cusno.
    ENDIF.

    READ TABLE messtab WITH  KEY msgtyp = 'E'.
    IF sy-subrc =  0.
      ADD 1 TO tot-err.
*Error File
      MOVE-CORRESPONDING t_indata TO t_outdata .
      t_outdata-aedat = sy-datum.
      t_outdata-usnam = sy-uname.
      t_outdata-sort = 'B'.
*Get the Error details
      PERFORM format_message.
      APPEND t_outdata.
    ELSE.
      ADD 1 TO tot-ok.
*Success Message
      MOVE-CORRESPONDING t_indata TO t_outdata.
      t_outdata-aedat = sy-datum.
      t_outdata-usnam = sy-uname.
      t_outdata-sort = 'A'.
      APPEND t_outdata.
    ENDIF.
    IF v_open = 'X'.
      PERFORM bdc_close_group USING p_sess.
    ENDIF.
    REFRESH bdcdata.
    clear : v_open,
            messtab.
    refresh : messtab.
  endloop.
ENDFORM.                    " CREATE_CUSTOMER_EXCISE
*&---------------------------------------------------------------------*
*&      Form  DO_J1ID_BY_CALLTRAN
*&---------------------------------------------------------------------*
*      Fill the appropriate screens for the transaction and            *
*      Call transaction j1id (Customer excise).                        *
*----------------------------------------------------------------------*
FORM DO_J1ID_BY_CALLTRAN  TABLES   P_T_INDATA STRUCTURE T_INDATA
                          USING    P_P_MODE
                                   P_ERR_MSG
                                   P_BATCH_NAME
                                   P_SAP_cusno.
  PERFORM process_screen_100.
  PERFORM process_screen_110.
ENDFORM.                    " DO_J1ID_BY_CALLTRAN
*&---------------------------------------------------------------------*
*&      Form  PROCESS_SCREEN_100
*&---------------------------------------------------------------------*
*       Initial screen of j1id - where Customer excise                 *
*       is choosen from various options                                *
*----------------------------------------------------------------------*
FORM PROCESS_SCREEN_100 .
  perform bdc_dynpro      using 'SAPMJ1ID'   '0200'.
  perform bdc_field       using 'BDC_CURSOR' 'RB7'.
  perform bdc_field       using 'BDC_OKCODE' '=EX'.
  perform bdc_field       using 'RB11'       ''.
  perform bdc_field       using 'RB7'        'X'.

ENDFORM.                    " PROCESS_SCREEN_100
*&---------------------------------------------------------------------*
*&      Form  PROCESS_SCREEN_110
*&---------------------------------------------------------------------*
*       Screen consisting of all details on Customer                   *
*       excise maintenance                                             *
*----------------------------------------------------------------------*
FORM PROCESS_SCREEN_110 .

  DATA: l_line TYPE i.
  DATA: tabix   LIKE sy-tabix.
  DESCRIBE TABLE t_indata LINES l_line.
  perform: bdc_dynpro      using 'SAPLJ1I0'    '0500',
           bdc_field       using 'BDC_CURSOR'  'VIM_POSITION_INFO',
           bdc_field       using 'BDC_OKCODE'  '=NEWL',
           bdc_dynpro      using 'SAPLJ1I0'    '0500',
           bdc_field       using 'BDC_CURSOR'  'J_1IMOCUST-USNAM(01)',
           bdc_field       USING 'BDC_OKCODE'  '=SAVE'.

  PERFORM: bdc_field    USING 'J_1IMOCUST-KUNNR(01)'      t_indata-kunnr,
           bdc_field    USING 'J_1IMOCUST-J_1IEXCD(01)'   t_indata-j_1iexcd,
           bdc_field    USING 'J_1IMOCUST-J_1IEXRN(01)'   t_indata-J_1IEXRN,
           bdc_field    USING 'J_1IMOCUST-J_1IEXRG(01)'   t_indata-j_1iexrg,
           bdc_field    USING 'J_1IMOCUST-J_1IEXDI(01)'   t_indata-j_1iexdi,
           bdc_field    USING 'J_1IMOCUST-J_1IEXCO(01)'   t_indata-j_1iexco,
           bdc_field    USING 'J_1IMOCUST-J_1ICSTNO(01)'  t_indata-j_1icstno,
           bdc_field    USING 'J_1IMOCUST-J_1ILSTNO(01)'  t_indata-j_1ilstno,
           bdc_field    USING 'J_1IMOCUST-J_1IPANNO(01)'  t_indata-j_1ipanno,
           bdc_field    USING 'J_1IMOCUST-J_1IEXCICU(01)' t_indata-j_1iexcicu,
           bdc_field    USING 'J_1IMOCUST-AEDAT(01)'      sy-datum,
           bdc_field    USING 'J_1IMOCUST-USNAM(01)'      sy-uname,
           bdc_field    USING 'J_1IMOCUST-J_1ISERN(01)'   t_indata-J_1ISERN.

  PERFORM: bdc_dynpro      USING 'SAPLJ1I0'       '0500',
           bdc_field       USING 'BDC_OKCODE'     '=ENDE'.

  PERFORM: bdc_dynpro      USING 'SAPMJ1ID'       '0200',
           bdc_field       USING 'BDC_OKCODE'     '/EEXIT',
           bdc_field       USING 'BDC_CURSOR'     'EXCISE'.

ENDFORM.                    " PROCESS_SCREEN_110
*&---------------------------------------------------------------------*
*&      Form  FORMAT_MESSAGE
*&---------------------------------------------------------------------*
*       Get the Error details
*----------------------------------------------------------------------*
FORM FORMAT_MESSAGE .
  LOOP AT messtab WHERE msgtyp = 'E'.
    CALL FUNCTION 'FORMAT_MESSAGE'
      EXPORTING
        id        = messtab-msgid
        lang      = 'EN'
        no        = messtab-msgnr
        v1        = messtab-msgv1
        v2        = messtab-msgv2
        v3        = messtab-msgv3
        v4        = messtab-msgv4
      IMPORTING
        msg       = g_mess
      EXCEPTIONS
        not_found = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    CONCATENATE t_outdata-desc
                g_mess
                INTO t_outdata-desc SEPARATED BY space.
  ENDLOOP.
ENDFORM.                    " FORMAT_MESSAGE
*&---------------------------------------------------------------------*
*&      Form  SUCCESS_ERROR_DOWNLOAD
*&---------------------------------------------------------------------*
*       Success and Error file Download
*----------------------------------------------------------------------*
FORM SUCCESS_ERROR_DOWNLOAD .

  SORT t_outdata BY sort.
  READ TABLE t_outdata INDEX 1.
  IF t_outdata-sort = 'A'.
    CLEAR : t_outdata.
    t_outdata-altkn = 'Succ'.
    INSERT t_outdata INTO t_outdata INDEX 1.
  ENDIF.

  READ TABLE t_outdata WITH KEY sort = 'B'.
  IF sy-subrc = 0.
    g_init = sy-tabix.
    CLEAR : t_outdata.
    t_outdata-altkn = 'Erro'.
    INSERT t_outdata INTO t_outdata INDEX g_init.
    g_init = g_init - 1.
*      CLEAR t_err.
    IF g_init IS NOT INITIAL.
      INSERT INITIAL LINE INTO  t_outdata INDEX g_init.
    ENDIF.
  ENDIF.
*Download error and Success files
  PERFORM download_result.
*  ENDIF.
**Success Download
*    PERFORM success_download.
ENDFORM.                    " SUCCESS_ERROR_DOWNLOAD
*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD_RESULT
*&---------------------------------------------------------------------*
*       Download error and Success files
*----------------------------------------------------------------------*
FORM DOWNLOAD_RESULT.
  DATA : f_string TYPE string.
  f_string = p_rest.
  PERFORM download_header_line.

  LOOP AT t_outdata.
    MOVE-CORRESPONDING t_outdata TO t_rest.
    IF t_outdata-altkn = 'Erro'.

*      t_rest-s_no  = 'Error'.
      t_rest-altkn = 'Error '.

    ELSEIF t_outdata-altkn = 'Succ'.
*      t_rest-s_no = 'Success'.
      t_rest-altkn = 'Success'.
    ENDIF.
    APPEND t_rest.
  ENDLOOP.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
*    BIN_FILESIZE                    =
      filename                        = f_string
     filetype                        = 'ASC'
*    APPEND                          = ' '
     write_field_separator           = 'X'
    TABLES
      data_tab                        = t_rest[]
*    FIELDNAMES                      =
   EXCEPTIONS
     file_write_error                = 1
     no_batch                        = 2
     gui_refuse_filetransfer         = 3
     invalid_type                    = 4
     no_authority                    = 5
     unknown_error                   = 6
     header_not_allowed              = 7
     separator_not_allowed           = 8
     filesize_not_allowed            = 9
     header_too_long                 = 10
     dp_error_create                 = 11
     dp_error_send                   = 12
     dp_error_write                  = 13
     unknown_dp_error                = 14
     access_denied                   = 15
     dp_out_of_memory                = 16
     disk_full                       = 17
     dp_timeout                      = 18
     file_not_found                  = 19
     dataprovider_exception          = 20
     control_flush_error             = 21
     OTHERS                          = 22
            .
  IF sy-subrc = 0.
    clear t_rest[].
  ELSE.
    V_FLAG1 = 'X'.
  ENDIF.
ENDFORM.                    " DOWNLOAD_RESULT
*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD_HEADER_LINE
*&---------------------------------------------------------------------*
*       Header line for output data
*----------------------------------------------------------------------*
FORM DOWNLOAD_HEADER_LINE .
*  t_rest-s_no       = 's_no'.
  t_rest-altkn      = 'prev acct no.(BAAN Customer no.)'.
  t_rest-KUNNR      = 'Customer'.
  t_rest-j_1iexcd   = 'ECC No.'.
  t_rest-J_1IEXRN   = 'Excise Reg No'.
  t_rest-j_1iexrg   = 'Excise Range '.
  t_rest-j_1iexdi   = 'Excise Division'.
  t_rest-j_1iexco   = 'Excise Commissionerate' .
  t_rest-j_1icstno  = 'CST No '.
  t_rest-j_1ilstno  = 'LST No '.
  t_rest-j_1ipanno  = 'PAN No '.
  t_rest-j_1iexcicu = 'Excise Tax Indicator for Customer '.
  t_rest-aedat      = 'Date'.
  t_rest-usnam      = 'user name'.
  t_rest-desc       = 'Description'.
  t_rest-J_1ISERN   = 'Service Tax Regn No'.
  INSERT  t_rest INDEX 1.

ENDFORM.                    " DOWNLOAD_HEADER_LINE
*&---------------------------------------------------------------------*
*&      Form  TEST_ONLY_RESULT
*&---------------------------------------------------------------------*
*       To move success files to result files on  test only
*----------------------------------------------------------------------*
form TEST_ONLY_RESULT .
  if not t_indata[] is initial.
    LOOP AT t_indata.
      MOVE-CORRESPONDING t_indata to t_outdata.
      t_outdata-aedat = sy-datum.
      t_outdata-usnam = sy-uname.
      t_outdata-sort = 'A'.
      APPEND t_outdata.
    ENDLOOP.
  endif.
endform.                    " TEST_ONLY_RESULT
