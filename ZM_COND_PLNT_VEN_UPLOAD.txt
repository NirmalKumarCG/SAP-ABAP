*************************************************************************
**Report Name: ZM_COND_PLNT_VEN_UPLOAD                                  *
**Consultant : Sathish Kumar.S                                          *
**Author     : Sathish Kumar.S                                          *
**Date       : 16.02.2009                                               *
**Description: Program creates an Batch Input Session for upload of     *
* Condition Records(Plant/Vendor/Material) via transaction FV11.        *
**----------------------------------------------------------------------*

REPORT ZM_COND_PLNT_VEN_UPLOAD
       NO STANDARD PAGE HEADING LINE-SIZE 255.

TABLES: T685,   "Conditions: Types
        T001W,  "Plants/Branches
        LFA1,   "Vendor Master (General Section)
        MARA.   "General Material Data
*----------------------------------------------------------------------*
* Type-pools
*----------------------------------------------------------------------*
TYPE-POOLS : truxs.
*include bdcrecx1.
* include programs for common processes in interface programs
DATA  zzret_code LIKE sy-subrc.
INCLUDE zbdcincl.
*----------------------------------------------------------------------*
* Selection Screen
*----------------------------------------------------------------------*
SELECTION-SCREEN : BEGIN OF BLOCK 001 WITH FRAME TITLE text-001.
PARAMETERS: p_upl       LIKE rlgrap-filename DEFAULT 'c:\temp\venexcise.xls',
            p_hed       AS CHECKBOX DEFAULT 'X',     " With header line? X or Y for yes
            p_test      AS CHECKBOX,                 " test run? X or Y for yes
            p_sess(12)  TYPE c,
            p_mode.
PARAMETERS: p_rest      LIKE rlgrap-filename  DEFAULT 'c:\temp\Result.xls'.
SELECTION-SCREEN : END OF BLOCK 001.


*----------------------------------------------------------------------*
* Data Declaration
*----------------------------------------------------------------------*
* input file format for Vendor Excise Maintainance
DATA: BEGIN OF t_indata OCCURS 0,
       KSCHL LIKE RV13A-KSCHL,     "Condition type
       WERKS LIKE KOMG-WERKS,      "Plant
       LIFNR LIKE KOMG-LIFNR,      "Vendor Account Number
       MATNR LIKE KOMG-MATNR,      "Material Number
       KBETR(14) ,"LIKE KONP-KBETR,      "Rate (condition amount or percentage) where no scale exists
       MWSK1 LIKE KONP-MWSK1,      "Sales Tax Code
*****Changes by Gnana
       DATAB(10)," LIKE RV13A-DATAB,      "Valid from
       DATBI(10), "LIKE RV13A-DATBI,      "Valid to
      END OF t_indata.

*Output file format for Vendor Excise Maintainance
DATA: BEGIN OF t_outdata OCCURS 0.
      INCLUDE STRUCTURE t_indata.
DATA: desc type string,            "Description for error fields
      sort,
      end of t_outdata.

*Output file format for Vendor Excise Maintainance with header line
DATA: BEGIN OF t_rest OCCURS 0,
       KSCHL(14),     "Condition type
       WERKS(5),      "Plant
       LIFNR(10),     "Vendor Account Number
       MATNR(18),     "Material Number
       KBETR(10),     "Rate (condition amount or percentage) where no scale exists
       MWSK1(8),      "Sales Tax Code
*****Changes by Gnana
       DATAB(10),      "Valid from
       DATBI(10),      "Valid to
       desc type string,
      END OF t_rest.

DATA: it_raw  TYPE truxs_t_text_data.

DATA:  w_upllen            TYPE i VALUE 2000,
       err_msg(100)        TYPE c,
       sap_venno           LIKE lfa1-lifnr,
       batch_name(30)      TYPE c,
       v_open.

* Constants
CONSTANTS: c_trans(4)    VALUE 'FV11', " transaction used
           delimiter(1)  VALUE ','.
DATA:  messtab LIKE bdcmsgcoll OCCURS 0 WITH HEADER LINE.

*To store how much datas have read
DATA: BEGIN OF tot,
        ok                 TYPE i,
        read               TYPE i,
        err                TYPE i,
      END OF tot.

DATA : g_init TYPE i,
       g_mess TYPE string,
       v_flag TYPE c,
       v_upload,
       v_dwn.

*----------------------------------------------------------------------*
* At Selection-Screen for upload and download file
*----------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_upl.
*To get file name for upload file at selection screen
  CALL FUNCTION 'F4_FILENAME'
    IMPORTING
      file_name = p_upl.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_rest.
*To get file name for upload file at selection screen
  CALL FUNCTION 'F4_FILENAME'
    IMPORTING
      file_name = p_rest.

*----------------------------------------------------------------------*
*  Start Of Selection
*----------------------------------------------------------------------*
START-OF-SELECTION.
IF p_upl IS INITIAL.
      MESSAGE 'Please Fill the Upload File Path' TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.
*Validating Download File Path
    IF p_rest IS INITIAL.
      MESSAGE 'Please Fill the Download File Path' TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.
  IF p_sess IS INITIAL.
    MESSAGE 'Please Fill the BDC Session Name' TYPE 'S' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  IF p_mode IS INITIAL.
    MESSAGE 'Please Fill the BDC Session Mode' TYPE 'S' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

*To upload input File
  PERFORM 100_upload_file.
  IF v_upload EQ 'X'.
    CLEAR : v_upload.
    WRITE: /01   text-001 ,
         33        ':',
         36      sy-repid,
*          92      text-001,
         92      sy-pagno,
        /01      text-003,
         10      'by',
         33      ':',
         36      sy-uname,
         82      sy-datum DD/MM/YY,
         92      sy-uzeit.

    ULINE.
    SKIP 1.
    ULINE.
    WRITE : 'Error in Uploading the File'.
    ULINE.
    EXIT.
  ENDIF.

  IF t_indata[] IS INITIAL.
    WRITE: / 'No records were uploaded.'.
    ULINE.
  ENDIF.

*Validation of Fields before uploading
  PERFORM field_validation.
  IF p_test IS INITIAL.
    if not t_indata[] is initial.
      PERFORM create_cond_record.
    endif.
  ENDIF.

*----------------------------------------------------------------------*
*  End Of Selection
*----------------------------------------------------------------------*
END-OF-SELECTION.
IF NOT t_outdata[] IS INITIAL.
*To Download error file.
  PERFORM success_error_download.
ENDIF.
   WRITE: /01      text-001 ,
            32        ':',
            34      sy-repid,
*          92      text-001,
            92      sy-pagno,
           /01      text-002,
            10      'by',
            32      ':',
            34      sy-uname,
            82      sy-datum DD/MM/YY,
            92      sy-uzeit.

    ULINE.
    SKIP 1.
    IF v_dwn ne 'X'.
    WRITE: /01     text-003,
            25     p_rest.
*         /01     text-006,
*          20     batch_name.
    else.
     clear v_dwn.
     write : 'Error in Downloading'.
    endif.
    ULINE.
    SKIP 2.
    WRITE: / 'TOTAL INPUT RECORDS READ',   35 tot-read.
    IF p_test IS INITIAL.
      tot-ok = tot-read - tot-err.
      WRITE: / 'TOTAL CONDITION RECORDS CREATED',    35 tot-ok.
      WRITE: / 'TOTAL CONDITION RECORDS IN ERROR',   35 tot-err.
    ELSE.
      tot-ok = tot-read - tot-err.
      WRITE: / 'TOTAL RECORDS SUCCESS',    35 tot-ok.
      WRITE: / 'TOTAL RECORDS ERROR',   35 tot-err.
    ENDIF.

*&---------------------------------------------------------------------*
*&      Form  100_UPLOAD_FILE
*&---------------------------------------------------------------------*
*       To upload input File
*----------------------------------------------------------------------*
FORM 100_upload_file .
  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
    EXPORTING
      i_line_header        = p_hed
      i_tab_raw_data       = it_raw
      i_filename           = p_upl
    TABLES
      i_tab_converted_data = t_indata.
  if sy-subrc NE 0.
     v_upload = 'X'.
  endif.
ENDFORM.                    " 100_UPLOAD_FILE
*&---------------------------------------------------------------------*
*&      Form  FIELD_VALIDATION
*&---------------------------------------------------------------------*
*       Validate Fields befor uploading
*----------------------------------------------------------------------*
FORM field_validation .
  DATA: v_lifnr(10) TYPE n,
        v_matnr(18) TYPE n,
        v_werks(4)  TYPE n.

  LOOP AT t_indata.
    ADD 1 TO tot-read.

  if t_indata-kschl is not INITIAL.
    TRANSLATE t_indata-kschl TO UPPER CASE.
    select single kschl FROM T685
                        INTO T685-kschl
                       WHERE kschl = t_indata-kschl.
    if sy-subrc ne 0.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       CONCATENATE 'Condition Type '
                    t_indata-kschl
                   ' does not exist or active'
              INTO  t_outdata-desc.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
    endif.
  else.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       t_outdata-desc = 'Please fill Condition Type'.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
  endif.

  if t_indata-werks is not INITIAL.
     v_werks = t_indata-werks.
     t_indata-werks = v_werks.
    select single werks FROM T001W
                        INTO T001W-werks
                       WHERE werks = t_indata-werks.
    if sy-subrc ne 0.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       CONCATENATE 'Plant '
                    t_indata-werks
                   ' does not exist or active'
              INTO  t_outdata-desc.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
    endif.
  else.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       t_outdata-desc = 'Please fill Plant '.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
  endif.

  if t_indata-lifnr is not INITIAL.
    if t_indata-lifnr co '1234567890 '.
       v_lifnr = t_indata-lifnr.
       t_indata-lifnr = v_lifnr.
    else.
       TRANSLATE t_indata-lifnr TO UPPER CASE.
    endif.
    select single lifnr FROM LFA1
                        INTO LFA1-lifnr
                       WHERE lifnr = t_indata-lifnr.
    if sy-subrc ne 0.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       CONCATENATE 'Account Number of Vendor or Creditor '
                    t_indata-lifnr
                   'does not exist or active'
              INTO  t_outdata-desc.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
    else.
*      t_indata-lifnr = lfa1-lifnr.
      modify t_indata.
    endif.
  else.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       t_outdata-desc = 'Please fill Vendor or Creditor '.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
  endif.

  if t_indata-matnr is not INITIAL.
    if t_indata-matnr co '1234567890 '.
       v_matnr = t_indata-matnr.
       t_indata-matnr = v_matnr.
    else.
       TRANSLATE t_indata-matnr TO UPPER CASE.
    endif.
    select single matnr FROM MARA
                        INTO MARA-matnr
                       WHERE matnr = t_indata-matnr.
    if sy-subrc ne 0.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       CONCATENATE 'Material Number '
                    t_indata-matnr
                   'does not exist or active'
              INTO  t_outdata-desc.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
    else.
*      t_indata-matnr = mara-matnr.
      modify t_indata.
    endif.
  else.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       t_outdata-desc = 'Please fill Material Number '.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
  endif.

  if t_indata-kbetr is INITIAL.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       t_outdata-desc = 'Please fill Amount'.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
  endif.

  if t_indata-mwsk1 is INITIAL.
       ADD 1 TO tot-err.
       MOVE-CORRESPONDING t_indata TO t_outdata.
       t_outdata-desc = 'Please fill Tax code'.
       t_outdata-sort = 'B'.
       APPEND t_outdata.
       DELETE t_indata.
       CONTINUE.
  endif.

  ENDLOOP.
ENDFORM.                    " FIELD_VALIDATION
*&---------------------------------------------------------------------*
*&      Form  CREATE_COND_RECORD
*&---------------------------------------------------------------------*
*Create the Condition Record's based on the data from the i/pfile.
*----------------------------------------------------------------------*
FORM create_cond_record.
  CLEAR: err_msg,
         batch_name,
         t_outdata.
  loop at t_indata.
  PERFORM do_fv11_by_calltran
                     TABLES t_indata
                     USING  p_mode        "Show errors only
                            err_msg
                            batch_name
                            sap_venno.


*perform bdc_transaction using 'J1ID'.
  CALL TRANSACTION 'FV11' USING bdcdata MODE p_mode MESSAGES INTO messtab.
  IF sy-subrc NE 0.
    zzret_code = sy-subrc.
    IF v_open NE 'X'.
      PERFORM bdc_open_group USING p_sess.
      v_open = 'X'.
    ENDIF.
    PERFORM bdc_insert USING 'FV11'.
  ELSE.
    zzret_code = 0.
  ENDIF.
  IF zzret_code = 0.
    sap_venno = sy-msgv1.
  ELSE.
    CLEAR sap_venno.
  ENDIF.

  READ TABLE messtab WITH  KEY msgtyp = 'E'.
  IF sy-subrc =  0.
    ADD 1 TO tot-err.
    MOVE-CORRESPONDING t_indata TO t_outdata .
    t_outdata-sort = 'B'.
*Get the Error details
    PERFORM format_message.
    APPEND t_outdata.
  ELSE.
    ADD 1 TO tot-ok.
*Success Message
    MOVE-CORRESPONDING t_indata TO t_outdata.
    t_outdata-sort = 'A'.
    APPEND t_outdata.
  ENDIF.

  IF v_open = 'X'.
      PERFORM bdc_close_group USING p_sess.
    ENDIF.
  REFRESH bdcdata.
  clear : v_open,
          messtab.
  refresh : messtab.
  endloop.
ENDFORM.                    "CREATE_COND_RECORD
*&---------------------------------------------------------------------*
*&      Form  DO_FV11_BY_CALLTRAN
*&---------------------------------------------------------------------*
*      Fill the appropriate screens for the transaction and            *
*       Call transaction FV11 (Condition Record).                      *
*----------------------------------------------------------------------*
FORM DO_FV11_BY_CALLTRAN  TABLES   P_T_INDATA STRUCTURE T_INDATA
                          USING    P_P_MODE
                                   P_ERR_MSG
                                   P_BATCH_NAME
                                   P_SAP_VENNO.
  PERFORM process_screen_100.
  PERFORM process_screen_200.
  PERFORM process_screen_300.


ENDFORM.                    " DO_FV11_BY_CALLTRAN
*&---------------------------------------------------------------------*
*&      Form  process_screen_100.
*&---------------------------------------------------------------------*
*       This is the initial screen of FV11 - where Condition Record    *
*       is choosen from various options                                *
*----------------------------------------------------------------------*
FORM process_screen_100.

   PERFORM bdc_dynpro   USING 'SAPMV13A'    '0100'.
   PERFORM bdc_field    USING 'BDC_CURSOR'  'RV13A-KSCHL'.
   PERFORM bdc_field    USING 'BDC_OKCODE'  '=ANTA'.
*   PERFORM bdc_field    USING 'BDC_OKCODE'  '/00'.
   PERFORM bdc_field    USING 'RV13A-KSCHL' t_indata-kschl."'jmop'.

ENDFORM.                    " process_screen_100.
*&---------------------------------------------------------------------*
*&      Form  PROCESS_SCREEN_200
*&---------------------------------------------------------------------*
*    Combination Screen Where (Plant/Vendor/Material) is selected
*----------------------------------------------------------------------*
FORM PROCESS_SCREEN_200 .
   PERFORM bdc_dynpro   USING 'SAPLV14A'   '0100'.
   PERFORM bdc_field    USING 'BDC_CURSOR' 'RV130-SELKZ(01)'.
   PERFORM bdc_field    USING 'BDC_OKCODE' '=WEIT'.

ENDFORM.                    " PROCESS_SCREEN_200
*&---------------------------------------------------------------------*
*&      Form  PROCESS_SCREEN_300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM PROCESS_SCREEN_300 .
   if t_indata-kschl = 'ZVAT'.
   PERFORM bdc_dynpro   USING 'SAPMV13A'       '1801'.
   else.
   PERFORM bdc_dynpro   USING 'SAPMV13A'       '1363'.
   endif.
   PERFORM bdc_field    USING 'BDC_CURSOR'     'KONP-MWSK1(01)'.
   PERFORM bdc_field    USING 'BDC_OKCODE'     '=SICH'.
   PERFORM bdc_field    USING 'KOMG-WERKS'      t_indata-werks."'1000'.
   PERFORM bdc_field    USING 'KOMG-LIFNR'      t_indata-lifnr."'100060'.
   PERFORM bdc_field    USING 'KOMG-MATNR(01)'  t_indata-matnr."'npi14'.
   PERFORM bdc_field    USING 'KONP-KBETR(01)'  t_indata-kbetr."'              12'.
   PERFORM bdc_field    USING 'KONP-MWSK1(01)'  t_indata-mwsk1."'v1'.
*****Changes by Gnana
   PERFORM bdc_field    USING 'RV13A-DATAB(01)' t_indata-DATAB."'v1'.
   PERFORM bdc_field    USING 'RV13A-DATBI(01)' t_indata-DATBI."'v1'.


ENDFORM.                    " PROCESS_SCREEN_300
*&---------------------------------------------------------------------*
*&      Form  FORMAT_MESSAGE
*&---------------------------------------------------------------------*
*        Get the Error details
*----------------------------------------------------------------------*
FORM format_message .
  clear t_outdata-desc.
  LOOP AT messtab WHERE msgtyp = 'E'.
    CALL FUNCTION 'FORMAT_MESSAGE'
      EXPORTING
        id        = messtab-msgid
        lang      = 'EN'
        no        = messtab-msgnr
        v1        = messtab-msgv1
        v2        = messtab-msgv2
        v3        = messtab-msgv3
        v4        = messtab-msgv4
      IMPORTING
        msg       = g_mess
      EXCEPTIONS
        not_found = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.

    ENDIF.

    CONCATENATE t_outdata-desc
                g_mess
                INTO t_outdata-desc SEPARATED BY space.
  ENDLOOP.
ENDFORM.                    " FORMAT_MESSAGE
*&---------------------------------------------------------------------*
*&      Form  SUCCESS_ERROR_DOWNLOAD
*&---------------------------------------------------------------------*
*       Success and Error file Download
*----------------------------------------------------------------------*
form SUCCESS_ERROR_DOWNLOAD .

    SORT t_outdata BY sort.
    READ TABLE t_outdata INDEX 1.
    IF t_outdata-sort = 'A'.
      CLEAR : t_outdata.
      t_outdata-lifnr = 'Succ'.
      INSERT t_outdata INTO t_outdata INDEX 1.
    ENDIF.

    READ TABLE t_outdata WITH KEY sort = 'B'.
    IF sy-subrc = 0.
      g_init = sy-tabix.
      CLEAR : t_outdata.
      t_outdata-lifnr = 'Erro'.
      INSERT t_outdata INTO t_outdata INDEX g_init.
      g_init = g_init - 1.
*      CLEAR t_err.
      IF g_init IS NOT INITIAL.
        INSERT INITIAL LINE INTO  t_outdata INDEX g_init.
      ENDIF.
    ENDIF.
*Download error and Success files
    PERFORM download_result.
*  ENDIF.
**Success Download
*    PERFORM success_download.
endform.                    " SUCCESS_ERROR_DOWNLOAD
*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD_RESULT
*&---------------------------------------------------------------------*
*       Download error and Success files
*----------------------------------------------------------------------*
form DOWNLOAD_RESULT .
DATA : f_string TYPE string.
  f_string = p_rest.
  PERFORM download_header_line.

  LOOP AT t_outdata.
    MOVE-CORRESPONDING t_outdata TO t_rest.
    IF t_outdata-lifnr = 'Erro'.

      t_rest-kschl  = 'Error'.
      t_rest-lifnr = ' '.

    ELSEIF t_outdata-lifnr = 'Succ'.
      t_rest-kschl = 'Success'.
      t_rest-lifnr = ' '.
    ENDIF.
    APPEND t_rest.
  ENDLOOP.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
*    BIN_FILESIZE                    =
      filename                        = f_string
     filetype                        = 'ASC'
*    APPEND                          = ' '
     write_field_separator           = 'X'
    TABLES
      data_tab                        = t_rest[]
*    FIELDNAMES                      =
   EXCEPTIONS
     file_write_error                = 1
     no_batch                        = 2
     gui_refuse_filetransfer         = 3
     invalid_type                    = 4
     no_authority                    = 5
     unknown_error                   = 6
     header_not_allowed              = 7
     separator_not_allowed           = 8
     filesize_not_allowed            = 9
     header_too_long                 = 10
     dp_error_create                 = 11
     dp_error_send                   = 12
     dp_error_write                  = 13
     unknown_dp_error                = 14
     access_denied                   = 15
     dp_out_of_memory                = 16
     disk_full                       = 17
     dp_timeout                      = 18
     file_not_found                  = 19
     dataprovider_exception          = 20
     control_flush_error             = 21
     OTHERS                          = 22
            .
  IF sy-subrc = 0.
     clear t_rest[].
  ELSE.
    v_dwn = 'X'.
  ENDIF.
endform.                    " DOWNLOAD_RESULT
*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD_HEADER_LINE
*&---------------------------------------------------------------------*
*       Header line for output data
*----------------------------------------------------------------------*
form DOWNLOAD_HEADER_LINE .
       t_rest-kschl = 'Condition type'.
       t_rest-werks = 'Plant'.
       t_rest-lifnr = 'Vendor'.
       t_rest-matnr = 'Material Number'.
       t_rest-kbetr = 'Amount'.
       t_rest-mwsk1 = 'Tax Code'.
       t_rest-DATAB = 'Valid From'.
       t_rest-DATBI = 'Valid To'.
       t_rest-desc  = 'Description'.
       INSERT  t_rest INDEX 1.
endform.                    " DOWNLOAD_HEADER_LINE
